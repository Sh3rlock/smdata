"""
Django settings for smdata project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-$jp+n+i%j)b9yu!e@-6*xkfqe*h2o+^(7-w=%j%7@gr1qzud$3'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'smdataapp',
]

MIDDLEWARE = [
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'smdata.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'smdata.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

USE_L10N = True

LANGUAGES = [
    ('en', 'English'),
    ('hu', 'Hungarian'),
    ('ro', 'Romanian'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

# Static files
STATIC_URL = '/static/'
STATICFILES_DIRS = ['static/']
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Media files (optional)
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Security
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')


MEDIA_URL = 'media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Logging configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
    },
    'root': {
        'handlers': ['console'],
        'level': 'INFO',
    },
    'loggers': {
        'smdataapp': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': False,
        },
    },
}

# Email Configuration
# Set default from email for both development and production
DEFAULT_FROM_EMAIL = os.environ.get('DEFAULT_FROM_EMAIL', 'info@smdata.dev')

# Get email credentials from environment variables
EMAIL_HOST_USER = os.environ.get('EMAIL_HOST_USER', '')
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')

# Check if we're in production (DEBUG=False or on a hosting platform)
IS_PRODUCTION = not DEBUG or os.environ.get('DYNO') or os.environ.get('RAILWAY_ENVIRONMENT')

# Configure email backend based on environment and credentials
if IS_PRODUCTION and EMAIL_HOST_USER and EMAIL_HOST_PASSWORD:
    # Check if using SendGrid (email user is 'apikey')
    if EMAIL_HOST_USER == 'apikey':
        EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
        EMAIL_HOST = 'smtp.sendgrid.net'
        EMAIL_PORT = 587
        EMAIL_USE_TLS = True
        EMAIL_USE_SSL = False
        print(f"‚úÖ Email configured: SendGrid SMTP")
    else:
        # Standard SMTP configuration - DEFAULTING TO SENDGRID COMPATIBLE
        EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
        
        # Use SendGrid as default since Railway blocks other SMTP
        EMAIL_HOST = os.environ.get('EMAIL_HOST', 'smtp.sendgrid.net')
        EMAIL_PORT = int(os.environ.get('EMAIL_PORT', '587'))
        
        # Configure TLS/SSL based on port
        if EMAIL_PORT == 587:
            EMAIL_USE_TLS = True
            EMAIL_USE_SSL = False
        elif EMAIL_PORT == 465:
            EMAIL_USE_TLS = False
            EMAIL_USE_SSL = True
        else:
            EMAIL_USE_TLS = False
            EMAIL_USE_SSL = False
        
        print(f"‚úÖ Email configured: SMTP backend with {EMAIL_HOST_USER} for {DEFAULT_FROM_EMAIL}")
        print(f"   Using host: {EMAIL_HOST}:{EMAIL_PORT}")
        print(f"   TLS: {EMAIL_USE_TLS}, SSL: {EMAIL_USE_SSL}")
    
    # Set email timeout to prevent hanging
    EMAIL_TIMEOUT = 10
    print(f"   Timeout: {EMAIL_TIMEOUT}s")
    print(f"üìù Note: All contact form submissions are also saved to the database as backup")
else:
    # Development or production without credentials - use console backend
    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
    if IS_PRODUCTION:
        print("‚ö†Ô∏è  Email configured: Console backend (no SMTP credentials found)")
        print(f"   Set EMAIL_HOST_USER and EMAIL_HOST_PASSWORD environment variables to enable email delivery")
        print(f"üìù All submissions are saved to database - check Django admin for messages")
    else:
        print("‚ÑπÔ∏è  Email configured: Console backend (development mode)")
        print(f"üìù All submissions are saved to database - check Django admin for messages")
